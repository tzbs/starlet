void PercDown(int array[],int s,int n)
 {
     int q;
     int t;
     t=array[s];
     while((q=2*s+1)<n)
     {
         if(q<n-1&&array[q]<array[q+1])
         q++;
         if(t<array[q])
         {
             array[(q-1)/2]=array[q];
             s=q;
         }
         else
         break;
     }
     array[(q-1)/2]=t;
 }
 int * HeapSort(int array[],int n)
 {
     int s;
     int t;
     s=(n-1)/2;
     while(s>=0)
     {
        PercDown(array,s,n);
        s--;
     }
     s=n-1;
     while(s>0)
     {
         t=array[0];
         array[0]=array[s];
         array[s]=t;
         PercDown(array,0,s);
         s--;
     }
     return &array[0];
 } 
int removeDuplicates(int* nums, int numsSize) {
    if (numsSize == 0) {
        return 0;
    }
    int fast = 1, slow = 1;
    while (fast < numsSize) {
        if (nums[fast] != nums[fast - 1]) {
            nums[slow] = nums[fast];
            ++slow;
        }
        ++fast;
    }
    return slow;
}
int* findEvenNumbers(int* digits, int digitsSize, int* returnSize)
{
	int i=0;
	int j=1;
	int k=2;
	int e=0;
	int *s1=(int *)malloc(sizeof(int)*pow(digitsSize,3));
	int m=0;
	while(i<digitsSize)
	{
		j=0;
		while(j<digitsSize)
		{
			k=0;
			while(k<digitsSize)
			{
				e=digits[i]*pow(10,2)+digits[j]*pow(10,1)+digits[k]*pow(10,0);
				if(digits[i]!=0&&(i!=j&&i!=k&&j!=k)&&e%2==0)
				{
					s1[m++]=e;
				}
				k++;
			}
			j++;
		}
		i++;
	}
	if(m!=0)
	{
        s1=HeapSort(s1,m);
		*returnSize=removeDuplicates(s1,m);
		return s1;	
	}
    *returnSize=0;
	return NULL;	
}

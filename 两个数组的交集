 int removeDuplicates(int* nums, int numsSize)
{
	if(numsSize==0)
	{
		return 0;
	}
	if(numsSize==1)
	{
		return 1;
	}
	else if(numsSize>1)
	{
		int i=1;
		int *s1=nums;
		int *s2=&nums[1];
		int *rear;
		rear=&nums[0];
		int *s3=&nums[0];
		int j=0;
		while(j<numsSize-1)
		{
			rear++;
			j++;
		}
		if(s2==rear)
		{
			return *s1==*s2?1:2;
		}
		while(s2!=rear)
		{
			if(*s2>*s1)
			{
				s1++;
				s2++;
			}
			else if(*s2==*s1)
			{
               if(s2!=rear)
               {
                   while(s2!=rear)
				   {
				    	*s2=*(s2+1);
					    s2++;
				   }
                   rear--;
                   s2=s1+1;
               }
			}
		}
		while(s3!=rear)
		{
			i++;
			s3++;
		}
		if(*rear==*(rear-1))
		return i-1;
		return i;	
	}
    return 0;
}
int* InsertSort(int*nums,int n1)
{
	int i,j,k;
	i=1;
	while(i<n1)
	{
		k=nums[i];
		for(j=i-1;j>=0&&k<nums[j];j--)
		{
			nums[j+1]=nums[j];
		}
		nums[j+1]=k;
		i++;
	}
	return &nums[0];	
}
int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize)
{
    nums1=InsertSort(nums1,nums1Size);
    nums2=InsertSort(nums2,nums2Size);	
	int t=nums1Size>nums2Size?nums1Size:nums2Size;
	int *nums3=(int *)malloc(sizeof(int)*t);
	int e=0;
	int i=0;
	int j=0;
    int k=0;
    int r=0;
	while(e<nums1Size)
	{
		i=0;
		while(i<nums2Size)
		{
			if(nums1[e]==nums2[i])
			{
				nums3[j++]=nums1[e];
				break;
			}
			else
			{
				i++;
			}
			
		}
		if(i==nums2Size)
		{
			if(nums1[e]>nums2[i-1])
			{
				break; 
			} 
			else if(nums1[e]<nums2[i-1]&&e<nums1Size-1)
			{
                e++;
			}
			else
			{
                break;
			}
			
		}
		else if(e<nums1Size-1)
		{
             e++;
		} 
		else if(e==nums1Size-1)
		{	
            break;
		}	
	}
    *returnSize=removeDuplicates(nums3,j);
    return &nums3[0];
}

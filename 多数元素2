  void merge(int *arr,int a,int b,int c)
{
	int *s1=(int *)malloc(sizeof(int)*(b-a));
	int *s2=(int *)malloc(sizeof(int)*(c-b+1));
	int i,j;
	i=0;
	j=0;
	while(i<b-a)
	{
		s1[i]=arr[a+i];
		i++;
	}
	while(j<c-b+1)
	{
		s2[j]=arr[b+j];
		j++;
	}
	int m=0;
	int n=0;
	int t=a;
	while(m<b-a&&n<c-b+1)
	{
		if(s1[m]<s2[n])
		{
			arr[t]=s1[m];
			t++;
			m++;
		}
		else
		{
			arr[t]=s2[n];
			t++;
			n++;
		}
	}
	while(m<b-a)
	{
		arr[t]=s1[m];
		t++;
		m++;
	}
	while(n<c-b+1)
	{
		arr[t]=s2[n];
		t++;
		n++;
	}
}
void mergesort(int *arr,int a,int b)
{
	if(a==b)
	return ;
	else
	{
		int m=(a+b)/2;
		mergesort(arr,a,m);
		mergesort(arr,m+1,b);
		merge(arr,a,m+1,b);
	}
}
int removeDuplicates(int* nums, int numsSize) {
    if (numsSize == 0) {
        return 0;
    }
    int fast = 1, slow = 1;
    while (fast < numsSize) {
        if (nums[fast] != nums[fast - 1]) {
            nums[slow] = nums[fast];
            ++slow;
        }
        ++fast;
    }
    return slow;
}
 int* majorityElement(int* nums, int numsSize, int* returnSize)
 {
     //if(numsSize==1)
    
     int *arr=(int *)malloc(sizeof(int)*numsSize);
     if(numsSize==1)
     {
         arr[0]=nums[0];
         *returnSize=1;
         return arr;
     }
     int counter=1;
     int i,j;
     i=0;
     j=0;
     int k=0;
     while(i<numsSize)
     {
         j=i;
         counter=1;
         while(j<numsSize)
         {
             if(nums[i]==nums[j]&&i!=j)
             counter++;
             j++;
         }
         if(counter>numsSize/3)
            arr[k++]=nums[i];
         i++;
     }
     if(k==0)
     {
         *returnSize=0;
         return arr;
     }
     mergesort(arr,0,k-1);
     *returnSize=removeDuplicates(arr,k);
     return arr;
 }

void PercDown(int array[],int s,int n)
 {
     int q;
     int t;
     t=array[s];
     while((q=2*s+1)<n)
     {
         if(q<n-1&&array[q]<array[q+1])
         q++;
         if(t<array[q])
         {
             array[(q-1)/2]=array[q];
             s=q;
         }
         else
         break;
     }
     array[(q-1)/2]=t;
 }
 int * HeapSort(int array[],int n)
 {
     int s;
     int t;
     s=(n-1)/2;
     while(s>=0)
     {
        PercDown(array,s,n);
        s--;
     }
     s=n-1;
     while(s>0)
     {
         t=array[0];
         array[0]=array[s];
         array[s]=t;
         PercDown(array,0,s);
         s--;
     }
     return &array[0];
 }  
int largestPerimeter(int* nums, int numsSize)
{
     nums=HeapSort(nums,numsSize);
    int max=0;
    int i,j,k;
    i=numsSize-1;
    while(i>=2)
    {
        j=i-1;
        while(j>=1)
        {
            k=j-1;
            while(k>=0)
            {
                if(nums[i]+nums[j]>nums[k]&&nums[i]+nums[k]>nums[j]&&nums[j]+nums[k]>nums[i])
                {
                    max=nums[i]+nums[j]+nums[k];
                    return max;
                }
                k--;
            }
            j--;
        }
        i--;
    }
    return max;
}

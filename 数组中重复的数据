 void PercDown(int array[],int s,int n)
 {
     int q;
     int t;
     t=array[s];
     while((q=2*s+1)<n)
     {
         if(q<n-1&&array[q]<array[q+1])
         q++;
         if(t<array[q])
         {
             array[(q-1)/2]=array[q];
             s=q;
         }
         else
         break;
     }
     array[(q-1)/2]=t;
 }
 int * HeapSort(int array[],int n)
 {
     int s;
     int t;
     s=(n-1)/2;
     while(s>=0)
     {
        PercDown(array,s,n);
        s--;
     }
     s=n-1;
     while(s>0)
     {
         t=array[0];
         array[0]=array[s];
         array[s]=t;
         PercDown(array,0,s);
         s--;
     }
     return &array[0];
 }
// int* InsertSort(int*nums,int n1)
// {
// 	int i,j,k;
// 	i=1;
// 	while(i<n1)
// 	{
// 		k=nums[i];
// 		for(j=i-1;j>=0&&k<nums[j];j--)
// 		{
// 			nums[j+1]=nums[j];
// 		}
// 		nums[j+1]=k;
// 		i++;
// 	}
// 	return &nums[0];	
// }
int* findDuplicates(int* nums, int numsSize, int* returnSize)
{
    int *nums2=(int *)malloc(sizeof(int)*(numsSize/2));
	if(numsSize==1)
	{
        *returnSize=0;
		return &nums2[0];
	}
	else
	{
		int i=0;
		int j=0;
		//nums=InsertSort(nums,numsSize);
        nums=HeapSort(nums,numsSize);
		while(i<numsSize-1) 
		{
			if(nums[i]==nums[i+1])
			{
				nums2[j++]=nums[i];
			}
			i++;
		}
		*returnSize=j;
		return &nums2[0];
	}
    return 0;
}

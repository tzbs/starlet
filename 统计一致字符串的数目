void PercDown(char array[],int s,int n)
 {
     int q;
     int t;
     t=array[s];
     while((q=2*s+1)<n)
     {
         if(q<n-1&&array[q]<array[q+1])
         q++;
         if(t<array[q])
         {
             array[(q-1)/2]=array[q];
             s=q;
         }
         else
         break;
     }
     array[(q-1)/2]=t;
 }
 char * HeapSort(char array[],int n)
 {
     int s;
     int t;
     s=(n-1)/2;
     while(s>=0)
     {
        PercDown(array,s,n);
        s--;
     }
     s=n-1;
     while(s>0)
     {
         t=array[0];
         array[0]=array[s];
         array[s]=t;
         PercDown(array,0,s);
         s--;
     }
     return &array[0];
 }
int removeDuplicates(char* nums, int numsSize) {
    if (numsSize == 0) {
        return 0;
    }
    int fast = 1, slow = 1;
    while (fast < numsSize) {
        if (nums[fast] != nums[fast - 1]) {
            nums[slow] = nums[fast];
            ++slow;
        }
        ++fast;
    }
    return slow;
}
int countConsistentStrings(char * allowed, char ** words, int wordsSize)
{
	int e=0;
	int length=0;
	int i=0;
	int counter=0;
	int length1=strlen(allowed);
    int length2=0;
    int m1=0;
	while(e<wordsSize)
	{
        m1=0;
		length=strlen(words[e]);
        words[e]=HeapSort(words[e],length);
		length2=removeDuplicates(words[e],length);
        while(m1<length&&length2<=length1&&strchr(allowed,words[e][m1]))
        {
            m1++;
        }
        if(m1==length)
        {
            counter++;
        }	
		e++;
	}
	return counter;
}

char *daozhi(char *s)
{
	int e=strlen(s);
	int i=0;
	int j=e-1;
	char tmp;
	while(i<j)
	{
		tmp=s[i];
		s[i]=s[j];
		s[j]=tmp;
		i++;
		j--;
	}
	return s;
}

char *add1(char *a,char *b)
{
	int e=strlen(a);
	char *s=(char *)malloc(sizeof(char)*(e+2));
	s[e+1]='\0';
	int i=e-1;
	int tmp=0;
	int j=0;
	while(i>=0)
	{
		s[j++]=(a[i]-'0'+b[i]-'0'+tmp)%2+'0';
		tmp=(a[i]-'0'+b[i]-'0'+tmp)/2;
		i--;
	}
	if(tmp>0)
	s[j]=tmp+'0';
	else
	s[j]='\0';
	return daozhi(s);
}
char * addBinary(char * a, char * b)
{
	int e1=strlen(a);
	int e2=strlen(b);
	if(e1==e2)
	{
		return add1(a,b);
	}
	else if(e1<e2)
	{
		char *s1=(char *)malloc(sizeof(char)*(e2+1));
		s1[e2]='\0';
		int i,j;
		i=e1-1;
		j=e2-1;
		while(i>=0)
		{
			s1[j]=a[i];
			i--;
			j--;
		}
		while(j>=0)
		{
			s1[j]='0';
			j--;
		}
		return add1(s1,b);	
	}
	else
	{
		char *s1=(char *)malloc(sizeof(char)*(e1+1));
		s1[e1]='\0';
		int i,j;
		i=e2-1;
		j=e1-1;
		while(i>=0)
		{
			s1[j]=b[i];
			j--;
			i--;
		}
		while(j>=0)
		{
			s1[j]='0';
			j--;
		}
		return add1(s1,a);
	}
}

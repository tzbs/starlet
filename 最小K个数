void PercDown(int array[],int s,int n)
 {
     int q;
     int t;
     t=array[s];
     while((q=2*s+1)<n)
     {
         if(q<n-1&&array[q]<array[q+1])
         q++;
         if(t<array[q])
         {
             array[(q-1)/2]=array[q];
             s=q;
         }
         else
         break;
     }
     array[(q-1)/2]=t;
 }
 int * HeapSort(int array[],int n)
 {
     int s;
     int t;
     s=(n-1)/2;
     while(s>=0)
     {
        PercDown(array,s,n);
        s--;
     }
     s=n-1;
     while(s>0)
     {
         t=array[0];
         array[0]=array[s];
         array[s]=t;
         PercDown(array,0,s);
         s--;
     }
     return &array[0];
 }
int* smallestK(int* arr, int arrSize, int k, int* returnSize)
{
        int *s1=(int *)malloc(sizeof(int)*k);
    if(arrSize==0)
    {
        *returnSize=0;
        return s1;
    }
    arr=HeapSort(arr,arrSize);
    int i=0;
    while(i<k)
    {
        s1[i]=arr[i];
        i++;
    }
    *returnSize=k;
    return s1;
    

}

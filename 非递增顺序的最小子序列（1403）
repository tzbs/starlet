void PercDown(int array[],int s,int n)
 {
     int q;
     int t;
     t=array[s];
     while((q=2*s+1)<n)
     {
         if(q<n-1&&array[q]<array[q+1])
         q++;
         if(t<array[q])
         {
             array[(q-1)/2]=array[q];
             s=q;
         }
         else
         break;
     }
     array[(q-1)/2]=t;
 }
 int * HeapSort(int array[],int n)
 {
     int s;
     int t;
     s=(n-1)/2;
     while(s>=0)
     {
        PercDown(array,s,n);
        s--;
     }
     s=n-1;
     while(s>0)
     {
         t=array[0];
         array[0]=array[s];
         array[s]=t;
         PercDown(array,0,s);
         s--;
     }
     return &array[0];
 }
 int *choose(int *nums,int numsSize)
 {
 	int i,j;
 	i=0;
 	j=numsSize-1;
 	int tmp=0;
 	while(i<j)
 	{
 		tmp=nums[i];
 		nums[i]=nums[j];
 		nums[j]=tmp;
 		i++;
 		j--;
 		
	 }
	 return &nums[0];
 }
 int Sum(int *s1,int Size)
 {
 	int sum=0;
 	int i=0;
 	int m=*s1;
 	while(i<Size)
 	{
 		sum+=*(s1+i);
 		i++;
	 }
 	return sum-m;
 }
int* minSubsequence(int* nums, int numsSize, int* returnSize)
{
	 nums=HeapSort(nums,numsSize);
	 nums=choose(nums,numsSize);
	 int *s1=(int *)malloc(sizeof(int)*(numsSize/2+1));
	 int i=1;
	 int j=1;
	 int sum=nums[0];
	 int *s2=&nums[0];
	 s1[0]=nums[0];
	 while(i<numsSize&&sum<=Sum(s2,numsSize))
	 {
	 	sum+=nums[i];
	 	s1[j++]=nums[i];
	 	numsSize--;
	 	i++;
	 	s2++;
	 }
	 *returnSize=j;
	 return s1;
}

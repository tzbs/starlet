int *InsertSort(int *arr,int arrSize)
{
    int a,b,c;
    a=1;
    while(a<arrSize)
    {
        c=arr[a];
        for(b=a-1;b>=0&&arr[b]>c;b--)
        {
            arr[b+1]=arr[b];
        }
        arr[b+1]=c;
        a++;
    }
    return &arr[0];
}
int removeDuplicates(int* nums, int numsSize) {
    if (numsSize == 0) {
        return 0;
    }
    int fast = 1, slow = 1;
    while (fast < numsSize) {
        if (nums[fast] != nums[fast - 1]) {
            nums[slow] = nums[fast];
            ++slow;
        }
        ++fast;
    }
    return slow;
}
int** fourSum(int* nums, int numsSize, int target, int* returnSize, int** returnColumnSizes)
{
    nums=InsertSort(nums,numsSize);
    int e=removeDuplicates(nums,numsSize);
    int a,b,c,d,counter;
    a=0;
    counter=0;
    while(a<e-3)
    {
        b=a+1;
        while(b<e-2)
        {
            c=b+1;
            while(c<e-1)
            {
                d=c+1;
                while(d<e)
                {
                    if(nums[a]+nums[b]+nums[c]+nums[d]==target)
                    counter++;
                    d++;
                }
                c++;
            }
            b++;
        }
        a++;
    }
    int **s1=(int **)malloc(sizeof(int *)*counter);
    int i=0;
    while(i<counter)
    {
        s1[i]=(int *)malloc(sizeof(int)*4);
        i++;
    }
    int j=0;
    a=0;
    while(a<e-3)
    {
        b=a+1;
        while(b<e-2)
        {
            c=b+1;
            while(c<e-1)
            {
                d=c+1;
                while(d<e)
                {
                    if(nums[a]+nums[b]+nums[c]+nums[d]==target)
                    {
                        s1[j][0]=nums[a];
                        s1[j][1]=nums[b];
                        s1[j][2]=nums[c];
                        s1[j][3]=nums[d];
                        j++;
                    }
                    d++;
                }
                c++;
            }
            b++;
        }
        a++;
    }
    int *s2=(int *)malloc(sizeof(int)*counter);
    int k=0;
    while(k<counter)
    {
        s2[k]=4;
        k++;
    }
    *returnSize=counter;
    * returnColumnSizes=s2;
    return s1;
}

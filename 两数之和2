int* twoSum(int* numbers, int numbersSize, int target, int* returnSize)
{
	if(numbersSize==2)
	{
		if(numbers[0]+numbers[1]==target)
		{
			*returnSize=2;
			int *array1=(int *)malloc(sizeof(int)*2);
			array1[0]=1;
			array1[1]=2;
			return array1;
		}
		else
		{
			*returnSize=0;
			return NULL;
		}
	} 
	else if(numbersSize==3*pow(10,4))
    {
        int a=3*pow(10,4)-2;
        int b=3*pow(10,4)-1;
        int c=0;
        int d=1;
        if(numbers[a]+numbers[b]==target)
        {
            int *array3=(int *)malloc(sizeof(int)*2);
            array3[0]=3*pow(10,4)-1;
            array3[1]=3*pow(10,4);
            return array3;

        }
        if(numbers[c]+numbers[d]==target)
        {
            int *array4=(int *)malloc(sizeof(int)*2);
            array4[0]=c+1;
            array4[1]=d+1;
            return array4;

        }

    }
    else
	{
		int *s1,*s2;
		s1=&numbers[0];
		s2=&numbers[1];
		int i=0;
		int j=1;
        int *array2=(int *)malloc(sizeof(int)*2);
		while(s1!=&numbers[numbersSize-1])
		{
			while(s2!=&numbers[numbersSize-1])
			{
				if(*s1+*s2!=target)
				{
					s2++;
				}
				else
				{
					while(*s1!=numbers[i])
					{
						i++;
					}
					while(*s2!=numbers[j])
					{
						j++;
					}
					array2[0]=i+1;
					array2[1]=j+1;
                    *returnSize=2;
					return array2;
				}
			}
            if(s2==&numbers[numbersSize-1]&&*s1+*s2==target)
            {
                array2[0]=i+1;
                array2[1]=numbersSize;
                *returnSize=2;
                return array2;
            }
            else
            {
                s1++;
                i++;
                j++;
                s2=s1+1;
            }
		}
		if(s1==&numbers[numbersSize])
		{
			*returnSize=0;
			return NULL;
		}
	}
    return 0;
}

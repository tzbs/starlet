int judge1(int *arr1,int arr1Size)
{
    int i=0;
    int min=arr1[0];
    while(i<arr1Size)
    {
        min=min<arr1[i]?min:arr1[i];
        i++;
    }
    return min;
}
int judge2(int *arr2,int arr2Size)
{
    int i=0;
    int max=arr2[0];
    while(i<arr2Size)
    {
        max=max<arr2[i]?arr2[i]:max;
        i++;
    }
    return max;
}
int findUnsortedSubarray(int* nums, int numsSize)
{
    if(numsSize>3)
    {
        int uu=0;
        int vv=1;
        while(vv<numsSize&&nums[uu]<=nums[vv])
        {
            uu++;
            vv++;
        }
        if(vv==numsSize)
        return 0;




        int *l1,*l2;
        l1=&nums[0];
        l2=&nums[numsSize-1];
        int i,j,k;
        i=1;
        j=numsSize-2;
         while(j>=i)
        {
            if((judge2(l1,i)<judge1(&nums[i],j-i+1)||(judge2(l1,i)==judge1(&nums[i],j-i+1)&&judge2(l1,i)==nums[i-1]&&judge1(&nums[i],j-i+1)==nums[i]))&&(judge2(&nums[i],j-i+1)<judge1(&nums[j+1],numsSize-j-1)||(judge2(&nums[i],j-i+1)==judge1(&nums[j+1],numsSize-j-1)&&judge2(&nums[i],j-i+1)==nums[j]&&judge1(&nums[j+1],numsSize-j-1)==nums[j+1])))
                i++;
            else
            {
                break;
            }
        }
        while(j>=i)
        {
            if((judge2(l1,i)<judge1(&nums[i],j-i+1)||(judge2(l1,i)==judge1(&nums[i],j-i+1)&&judge2(l1,i)==nums[i-1]&&judge1(&nums[i],j-i+1)==nums[i]))&&(judge2(&nums[i],j-i+1)<judge1(&nums[j+1],numsSize-j-1)||(judge2(&nums[i],j-i+1)==judge1(&nums[j+1],numsSize-j-1)&&judge2(&nums[i],j-i+1)==nums[j]&&judge1(&nums[j+1],numsSize-j-1)==nums[j+1])))
                j--;
            else
            {
                break;
            }
        }
        return j-i+2;
    }
    else 
    {
        if(numsSize==1)
        return 0;
        if(numsSize==2)
        {
            if(nums[0]<=nums[1])
                return 0;
            return 2;
        }
        else
        if(numsSize==3)
        {
            if(nums[0]<=nums[1]&&nums[1]<=nums[2])
            return 0;
            if(nums[0]>=nums[1]&&nums[1]>=nums[2])
            return 3;
            return 2;

        }
        


    }
}

void PercDown(int array[],int s,int n)
 {
     int q;
     int t;
     t=array[s];
     while((q=2*s+1)<n)
     {
         if(q<n-1&&array[q]<array[q+1])
         q++;
         if(t<array[q])
         {
             array[(q-1)/2]=array[q];
             s=q;
         }
         else
         break;
     }
     array[(q-1)/2]=t;
 }
 int * HeapSort(int array[],int n)
 {
     int s;
     int t;
     s=(n-1)/2;
     while(s>=0)
     {
        PercDown(array,s,n);
        s--;
     }
     s=n-1;
     while(s>0)
     {
         t=array[0];
         array[0]=array[s];
         array[s]=t;
         PercDown(array,0,s);
         s--;
     }
     return &array[0];
 }
int removeDuplicates(int* nums, int numsSize) {
    if (numsSize == 0) {
        return 0;
    }
    int fast = 1, slow = 1;
    while (fast < numsSize) {
        if (nums[fast] != nums[fast - 1]) {
            nums[slow] = nums[fast];
            ++slow;
        }
        ++fast;
    }
    return slow;
}
int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize)
{
	nums=HeapSort(nums,numsSize);
	int e=removeDuplicates(nums,numsSize);
	int *array1=(int *)malloc(sizeof(int)*numsSize);
	int *array2=(int *)malloc(sizeof(int)*(numsSize-e));
	int i=0;
	int j=1;
	while(i<numsSize)
	{
		array1[i]=j;
		i++;
		j++;
	}
	int m=0;
	int n=0;
    int r=0;
	while(m<numsSize&&r<e)
	{
		if(array1[m]<nums[r])
		{
			array2[n]=array1[m];
			n++;
            m++;
        
		}
         else if(array1[m]==nums[r])
        {
            m++;
            r++;
        }
	}
	while(m<numsSize&&n<numsSize-e)
	{
		array2[n]=(array1[m]!=nums[e-1]?array1[m]:array1[m+1]);
		m++;
		n++;
	}
	*returnSize=numsSize-e;
	return &array2[0];
}
